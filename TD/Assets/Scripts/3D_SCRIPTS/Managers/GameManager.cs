using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class GameManager : MonoBehaviour
{
    public static GameManager Instance;

    public float playerCurrency = 1000f;
    public float totalPowerGenerated = 0f;
    private float currentPowerRequirement = 0f;
    private float availablePower = 0f;

    public float lowPowerThreshold = 20f; 
    public Image lowPowerIcon; 
    private bool isLowPowerActive = false; 

    private List<float> activePowerSources = new List<float>();

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(gameObject);
        }
    }

    private void Start()
    {
        UpdatePower();
    }

    private void UpdatePower()
    {
        //Reset and recalculate total power generated by active sources
        totalPowerGenerated = 0;
        foreach (float power in activePowerSources)
        {
            totalPowerGenerated += power;
        }

        //Calculate available power
        availablePower = totalPowerGenerated - currentPowerRequirement;

        //Ensure available power doesn't go below 0
        availablePower = Mathf.Max(availablePower, 0);

        Debug.Log($"Total Power Generated: {totalPowerGenerated}, Current Power Requirement: {currentPowerRequirement}, Available Power: {availablePower}");

        //Check for low power and toggle the icon if needed
        UpdateLowPowerIcon();
    }

    private void UpdateLowPowerIcon()
    {
        bool shouldEnableLowPower = availablePower < lowPowerThreshold;

        //Only toggle the icon if its state needs to change
        if (shouldEnableLowPower != isLowPowerActive)
        {
            isLowPowerActive = shouldEnableLowPower;
            lowPowerIcon.enabled = isLowPowerActive; 
            Debug.Log(isLowPowerActive ? "Low power condition met. Icon enabled." : "Power sufficient. Icon disabled.");
        }
    }

    public void RegisterPowerSource(float powerContribution)
    {
        activePowerSources.Add(powerContribution);
        UpdatePower(); 
    }

    public void UnregisterPowerSource(float powerContribution)
    {
        activePowerSources.Remove(powerContribution);
        UpdatePower();
    }

    public void AddTurretPowerRequirement(float powerRequirement)
    {
        currentPowerRequirement += powerRequirement;
        UpdatePower();
    }

    public void RemoveTurretPowerRequirement(float powerRequirement)
    {
        currentPowerRequirement -= powerRequirement;
        UpdatePower();
    }

    public bool HasSufficientPower(float powerRequirement)
    {
        return (totalPowerGenerated - currentPowerRequirement) >= powerRequirement;
    }

    public bool CanAfford(float amount)
    {
        return playerCurrency >= amount;
    }

    public void DeductCurrency(float amount)
    {
        if (CanAfford(amount))
        {
            playerCurrency -= amount;
            Debug.Log("Currency deducted: " + amount + ". Remaining currency: " + playerCurrency);
        }
        else
        {
            Debug.LogWarning("Not enough currency to deduct.");
        }
    }
}
